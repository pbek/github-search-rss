{
    "version": "https://jsonfeed.org/version/1",
    "title": "NixOS Package PRs for atop",
    "home_page_url": "https://pbek.github.io/github-search-rss/nixos-atop.json",
    "feed_url": "https://pbek.github.io/github-search-rss/nixos-atop.json",
    "description": "NixOS Package PRs for atop on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/20525370?u=3eca42cd1f8dd49002816cd842937abef0d1b030&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h1 dir=\"auto\">Motivation</h1>\n<p dir=\"auto\">Adds simple Python bindings for Nix evaluation, initialized from <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Mic92/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Mic92\">@Mic92</a>'s archived <a href=\"https://github.com/Mic92/pythonix\">Pythonix</a> (including the license), but then updated to work with the latest Nix version. This relates to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1438407433\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nix/issues/7271\" data-hovercard-type=\"issue\" data-hovercard-url=\"/NixOS/nix/issues/7271/hovercard\" href=\"https://github.com/NixOS/nix/issues/7271\">#7271</a></p>\n<p dir=\"auto\">Just like the existing Perl bindings under <code class=\"notranslate\">pkgs.nix.perl-bindings</code>, these Python bindings are available as a separate derivation under <code class=\"notranslate\">pkgs.nix.python-bindings</code>. This is a Python package that can be used as <code class=\"notranslate\">python.withPackages (p: [ pkgs.nix.python-bindings ]</code></p>\n<p dir=\"auto\">The API currently is just a single function:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">nix.eval(str, vars: dict)</code><br>\nEvaluates the Nix expression <code class=\"notranslate\">str</code> with variables <code class=\"notranslate\">vars</code> in scope. <code class=\"notranslate\">vars</code> is transparently converted from Python values to Nix values. The result of this function is transparently converted from a Nix value to a Python value.</li>\n</ul>\n<p dir=\"auto\">An example:</p>\n<details>\n<summary>flake.nix</summary>\n<div class=\"highlight highlight-source-nix notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  inputs.nix.url = &quot;github:tweag/nix/python-bindings&quot;;\n  inputs.nixpkgs.follows = &quot;nix/nixpkgs&quot;;\n  inputs.flake-utils.url = &quot;github:numtide/flake-utils&quot;;\n\n  outputs = { nix, nixpkgs, flake-utils, ... }: flake-utils.lib.eachDefaultSystem (system: {\n    defaultPackage = nixpkgs.legacyPackages.${system}.pkgs.python3.withPackages (p: [\n      nix.packages.${system}.nix.python-bindings\n    ]);\n  });\n}\"><pre class=\"notranslate\">{\n  <span class=\"pl-e\">inputs</span>.<span class=\"pl-e\">nix</span>.<span class=\"pl-e\">url</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>github:tweag/nix/python-bindings<span class=\"pl-pds\">\"</span></span>;\n  <span class=\"pl-e\">inputs</span>.<span class=\"pl-e\">nixpkgs</span>.<span class=\"pl-e\">follows</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nix/nixpkgs<span class=\"pl-pds\">\"</span></span>;\n  <span class=\"pl-e\">inputs</span>.<span class=\"pl-e\">flake-utils</span>.<span class=\"pl-e\">url</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>github:numtide/flake-utils<span class=\"pl-pds\">\"</span></span>;\n\n  <span class=\"pl-e\">outputs</span> <span class=\"pl-k\">=</span> { <span class=\"pl-smi\">nix</span><span class=\"pl-k\">,</span> <span class=\"pl-smi\">nixpkgs</span><span class=\"pl-k\">,</span> <span class=\"pl-smi\">flake-utils</span><span class=\"pl-k\">,</span> <span class=\"pl-k\">... </span>}: <span class=\"pl-v\">flake-utils</span><span class=\"pl-k\">.</span><span class=\"pl-v\">lib</span><span class=\"pl-k\">.</span><span class=\"pl-v\">eachDefaultSystem</span> (<span class=\"pl-smi\">system</span>: {\n    <span class=\"pl-e\">defaultPackage</span> <span class=\"pl-k\">=</span> <span class=\"pl-v\">nixpkgs</span><span class=\"pl-k\">.</span><span class=\"pl-v\">legacyPackages</span><span class=\"pl-k\">.</span><span class=\"pl-pse\">${</span><span class=\"pl-v\">system</span><span class=\"pl-pse\">}</span><span class=\"pl-k\">.</span><span class=\"pl-v\">pkgs</span><span class=\"pl-k\">.</span><span class=\"pl-v\">python3</span><span class=\"pl-k\">.</span><span class=\"pl-v\">withPackages</span> (<span class=\"pl-smi\">p</span>: [\n      <span class=\"pl-v\">nix</span><span class=\"pl-k\">.</span><span class=\"pl-v\">packages</span><span class=\"pl-k\">.</span><span class=\"pl-pse\">${</span><span class=\"pl-v\">system</span><span class=\"pl-pse\">}</span><span class=\"pl-k\">.</span><span class=\"pl-v\">nix</span><span class=\"pl-k\">.</span><span class=\"pl-v\">python-bindings</span>\n    ]);\n  });\n}</pre></div>\n</details>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ nix run\nPython 3.10.8 (main, Oct 11 2022, 11:35:05) [GCC 11.3.0] on linux\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n&gt;&gt;&gt; import nix\n&gt;&gt;&gt; nix.eval(&quot;1 + a&quot;, vars=dict(a = 2))\n3\"><pre class=\"notranslate\"><code class=\"notranslate\">$ nix run\nPython 3.10.8 (main, Oct 11 2022, 11:35:05) [GCC 11.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import nix\n&gt;&gt;&gt; nix.eval(\"1 + a\", vars=dict(a = 2))\n3\n</code></pre></div>\n<p dir=\"auto\">This work is sponsored by <a href=\"https://antithesis.com/\" rel=\"nofollow\">Antithesis</a> <g-emoji class=\"g-emoji\" alias=\"sparkles\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2728.png\">âœ¨</g-emoji></p>\n<h1 dir=\"auto\">TODO</h1>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Confirm that the Pythonix source code can be used: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1566981515\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nix/issues/7735\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/NixOS/nix/pull/7735/hovercard?comment_id=1093829625&amp;comment_type=review_comment\" href=\"https://github.com/NixOS/nix/pull/7735#discussion_r1093829625\">#7735 (comment)</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Make the build work, both incrementally for development and in CI</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Mark as experimental (<a href=\"https://github.com/NixOS/nix/pull/7735#issuecomment-1415853274\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/NixOS/nix/pull/7735/hovercard\">decided by the Nix Team</a>)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Write more tests</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Write documentation\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> How to develop the bindings</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Manual page for how to use the bindings</li>\n</ul>\n</li>\n</ul>\n<h1 dir=\"auto\">Context</h1>\n<p dir=\"auto\">The motivation for this is better tests for library functions in nixpkgs. Previous efforts:</p>\n<ul dir=\"auto\">\n<li>Using <a href=\"https://github.com/bats-core/bats-core\">bats</a>: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1327316875\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nixpkgs/issues/185022\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/NixOS/nixpkgs/pull/185022/hovercard\" href=\"https://github.com/NixOS/nixpkgs/pull/185022\">NixOS/nixpkgs#185022</a></li>\n<li>Using awk for generating property tests: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1485434623\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nixpkgs/issues/205190\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/NixOS/nixpkgs/pull/205190/hovercard\" href=\"https://github.com/NixOS/nixpkgs/pull/205190\">NixOS/nixpkgs#205190</a>, <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1519661931\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nixpkgs/issues/209099\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/NixOS/nixpkgs/pull/209099/hovercard?comment_id=1069177623&amp;comment_type=review_comment\" href=\"https://github.com/NixOS/nixpkgs/pull/209099#discussion_r1069177623\">NixOS/nixpkgs#209099 (comment)</a> and <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1558912770\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nixpkgs/issues/212858\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/NixOS/nixpkgs/pull/212858/hovercard\" href=\"https://github.com/NixOS/nixpkgs/pull/212858\">NixOS/nixpkgs#212858</a></li>\n</ul>\n<p dir=\"auto\">In particular <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1558912770\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nixpkgs/issues/212858\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/NixOS/nixpkgs/pull/212858/hovercard\" href=\"https://github.com/NixOS/nixpkgs/pull/212858\">NixOS/nixpkgs#212858</a> highlighted that property tests are currently either slow (if using the Nix CLI) or limited (if you work around this by cramming everything into a single Nix CLI call, which then means you can't test error messages anymore).</p>\n<p dir=\"auto\">I then instead focused on <a href=\"https://github.com/Mic92/pythonix\">Pythonix</a>, third-party Python bindings for the Nix evaluator. By using Python for testing we can use the Python ecosystem (such as property testing using <a href=\"https://hypothesis.readthedocs.io/\" rel=\"nofollow\">Hypothesis</a>), and by it linking to the Nix library it's much faster and we can test error messages too. Unfortunately Pythonix was archived due to being too hard to maintain, since the library interface isn't stable. So the fix is to just upstream it instead.</p>\n<h1 dir=\"auto\">Checklist for maintainers</h1>\n<p dir=\"auto\">Maintainers: tick if completed or explain if not relevant</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> agreed on idea</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> agreed on implementation strategy</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> tests, as appropriate\n<ul dir=\"auto\">\n<li>functional tests - <code class=\"notranslate\">tests/**.sh</code></li>\n<li>unit tests - <code class=\"notranslate\">src/*/tests</code></li>\n<li>integration tests - <code class=\"notranslate\">tests/nixos/*</code></li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> documentation in the manual</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> code and comments are self-explanatory</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> commit message explains why the change was made</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> new feature or bug fix: updated release notes</li>\n</ul>",
            "url": "https://github.com/NixOS/nix/pull/7735",
            "title": "Experimental python bindings",
            "date_modified": "2023-04-21T08:52:09.000Z",
            "date_published": "2023-02-01T23:00:31.000Z",
            "author": {
                "name": "infinisil",
                "url": "https://github.com/infinisil"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1148549?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h1 dir=\"auto\">Features</h1>\n<ul dir=\"auto\">\n<li>Flake inputs are now only copied to the Nix store if that's actually needed (fixing <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"503413602\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nix/issues/3121\" data-hovercard-type=\"issue\" data-hovercard-url=\"/NixOS/nix/issues/3121/hovercard\" href=\"https://github.com/NixOS/nix/issues/3121\">#3121</a>). That is, an operation like <code class=\"notranslate\">nix build nixpkgs#hello</code> no longer copies the <code class=\"notranslate\">nixpkgs</code> flake to the Nix store. Only an expression like <code class=\"notranslate\">src = ./.</code> or <code class=\"notranslate\">nix.registry.nixpkgs.flake = nixpkgs;</code> will cause an entire flake to be copied.</li>\n<li><code class=\"notranslate\">fetchTree</code> can now apply patches to a tree, e.g. <code class=\"notranslate\">fetchTree { ...; patches = [ ./foo.patch ./bar.patch ]; }</code> (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"677133792\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nix/issues/3920\" data-hovercard-type=\"issue\" data-hovercard-url=\"/NixOS/nix/issues/3920/hovercard\" href=\"https://github.com/NixOS/nix/issues/3920\">#3920</a>). Patches are applied in memory, so this doesn't require the entire tree to be materialized to disk.</li>\n<li>The <code class=\"notranslate\">github</code> fetcher now fetches zip archives instead of tarballs, and does not unpack them to disk. Depending on the filesystem, this can save a lot of disk space. (E.g. on ext4 with a 4 KiB block size, an unpacked Nixpkgs tree takes 252 MiB, whereas the zip archive takes 43 MiB.</li>\n</ul>\n<h1 dir=\"auto\">Design</h1>\n<p dir=\"auto\">The evaluator no longer accesses the filesystem directly. Instead, it uses a virtual filesystem abstraction called <code class=\"notranslate\">InputAccessor</code>, which has FS operations like <code class=\"notranslate\">readFile()</code> . You can get the <code class=\"notranslate\">InputAccessor</code> for an <code class=\"notranslate\">Input</code> by calling <code class=\"notranslate\">Input::lazyFetch()</code>, which unlike <code class=\"notranslate\">Input::fetch()</code> does not (necessarily) copy the input to the Nix store.</p>\n<p dir=\"auto\">The following <code class=\"notranslate\">InputAccessor</code>s currently exist:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">FSInputAccessor</code>: This directly accesses the host filesystem, optionally rooted at some prefix. This is used for both non-flake evaluation (e.g. <code class=\"notranslate\">nix-build ./foo.nix</code>), for <code class=\"notranslate\">path://</code> flakes, and for (dirty or clean) Git working directories (<code class=\"notranslate\">git+file://</code>). It optionally takes a set of allowed paths, which is used by the Git input type to ensure that you can't access untracked files.</li>\n<li><code class=\"notranslate\">MemoryInputAccessor</code>: An in-memory filesystem, used to provide <code class=\"notranslate\">&lt;nix/fetchurl.nix&gt;</code>.</li>\n<li><code class=\"notranslate\">ZipInputAccessor</code>: An accessor that reads directly from a zipfile, using libzip. Used by the <code class=\"notranslate\">github</code> fetcher.</li>\n<li><code class=\"notranslate\">PatchingInputAccessor</code>: An adaptor that wraps another accessor whose <code class=\"notranslate\">readFile()</code> applies a patch to the file returned by the underlying accessor.</li>\n</ul>\n<p dir=\"auto\">Paths are represented inside the evaluator using the <code class=\"notranslate\">SourcePath</code> type, which is a tuple of an <code class=\"notranslate\">InputAccessor</code> and a path relative to the root of the input. So the <code class=\"notranslate\">SourcePath</code> <code class=\"notranslate\">{input-&gt;lazyFetch(), \"/flake.nix\"}</code> represents the file <code class=\"notranslate\">flake.nix</code> inside some input.</p>\n<h1 dir=\"auto\">Incompatible changes</h1>\n<p dir=\"auto\">The <code class=\"notranslate\">outPath</code> attribute returned by <code class=\"notranslate\">fetchTree</code> et al. is no longer a store path but a path (i.e. a <code class=\"notranslate\">SourcePath</code>). This can cause some breakage, e.g. in NixOS, setting</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"nix.registry.nixpkgs.flake = nixpkgs;\"><pre class=\"notranslate\"><code class=\"notranslate\">nix.registry.nixpkgs.flake = nixpkgs;\n</code></pre></div>\n<p dir=\"auto\">causes the error <code class=\"notranslate\">A definition for option 'nix.registry.nixpkgs.to.path' is not of type 'string or signed integer or boolean or package'</code>. Instead you have to write:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"nix.registry.nixpkgs.flake = &quot;${nixpkgs}&quot;;\"><pre class=\"notranslate\"><code class=\"notranslate\">nix.registry.nixpkgs.flake = \"${nixpkgs}\";\n</code></pre></div>\n<p dir=\"auto\">to force the argument to be a store path.</p>\n<h1 dir=\"auto\">To do</h1>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Fix many test failures.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Fix showing source code in error messages. Currently the error formatter doesn't know anything about <code class=\"notranslate\">SourcePath</code>s.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Give a helpful message when trying to use untracked files in a git repo (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"798609338\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nix/issues/4507\" data-hovercard-type=\"issue\" data-hovercard-url=\"/NixOS/nix/issues/4507/hovercard\" href=\"https://github.com/NixOS/nix/issues/4507\">#4507</a>).</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Fix the evaluation cache.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Fix flake locking.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Get rid of the <code class=\"notranslate\">narHash</code> attribute in <code class=\"notranslate\">flake.lock</code>? Computing it is expensive since it requires reading the entire source tree. However, we need it to be able to substitute flake inputs, but maybe we don't care about that.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> What to do with <code class=\"notranslate\">path://</code> inputs? They're only locked by <code class=\"notranslate\">narHash</code>, so if we don't have <code class=\"notranslate\">narHash</code>, we can't lock <code class=\"notranslate\">path://</code> inputs.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Fix/improve subflake handling.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Update release notes / docs.</li>\n</ul>",
            "url": "https://github.com/NixOS/nix/pull/6530",
            "title": "Source tree abstraction",
            "date_modified": "2023-05-22T20:26:40.000Z",
            "date_published": "2022-05-12T19:10:40.000Z",
            "author": {
                "name": "edolstra",
                "url": "https://github.com/edolstra"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/4369700?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h1 dir=\"auto\">nix build (proof-of-concept)</h1>\n<p dir=\"auto\">This is a work-in-progress proof of concept nix build system for Zcash that is an alternative to the <code class=\"notranslate\">./zcutil/build.sh</code> and <code class=\"notranslate\">./depends</code> system.</p>\n<p dir=\"auto\"><strong>Status:</strong> Not yet to \"MVP\" status, see below.</p>\n<h2 dir=\"auto\">MVP Goals</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> There's a new <code class=\"notranslate\">./contrib/nix</code> directory.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Interested users who have nix installed can run <code class=\"notranslate\">nix build ./contrib/nix</code> to build <code class=\"notranslate\">zcashd</code> and a few other artifacts.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <strong>(X)</strong> The built artifacts <em>use the same build tools and dependencies as the <code class=\"notranslate\">./zcutil/build.sh / ./depends</code> build</em>.\n<ul dir=\"auto\">\n<li>The current branch relies on the <code class=\"notranslate\">nixpkgs</code> pinned <code class=\"notranslate\">clang 8.0.1</code>, rather than the <code class=\"notranslate\">./depends</code> pinned <code class=\"notranslate\">clang</code> which is being worked on in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"658684630\" data-permission-text=\"Title is private\" data-url=\"https://github.com/zcash/zcash/issues/4613\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/zcash/zcash/pull/4613/hovercard\" href=\"https://github.com/zcash/zcash/pull/4613\">#4613</a> .</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> A reviewer who doesn't know about nix can easily scan <code class=\"notranslate\">./contrib/nix/packages/*.{toml,sh}</code> to convince themselves that this build system at least tries to use the same pinned packages, same patches, and <em>similar</em> build flags as <code class=\"notranslate\">./depends</code>.</li>\n<li>The <code class=\"notranslate\">./depends</code> consistency checks - the nix build fails if any of the following cases occur, so that devs don't have to maintain the nix build directly, but users won't accidentally build an incorrect result:\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> If any new <code class=\"notranslate\">./depends</code> dependency is introduced without a corresponding update to the <code class=\"notranslate\">./contrib/nix</code> system.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> If any dependency is removed from <code class=\"notranslate\">./depends</code> without a corresponding update to the <code class=\"notranslate\">./contrib/nix</code> system.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> If any dependency hash is changed in <code class=\"notranslate\">./depends</code> without a corresponding update to the <code class=\"notranslate\">./contrib/nix</code> package.</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <strong>(X)</strong> Building zcash with this approach <em>must not</em> fetch any binaries from the nixos binary cache system as a security safety measure. This assumes an already good installation of <code class=\"notranslate\">nix</code>.\n<ul dir=\"auto\">\n<li>Status: This is possible at the user's discretion with <code class=\"notranslate\">--option build-use-substitutes false</code>.\n<ul dir=\"auto\">\n<li>Background: With default options to <code class=\"notranslate\">nix build</code> the binary cache is searched for everything. Because the <code class=\"notranslate\">zcashd</code> specific derivations are not present, this results in using binaries for any <code class=\"notranslate\">nixpkgs</code> and locally building any <code class=\"notranslate\">zcashd</code> derivations. This is not the safest behavior because in the future someone might upload binaries for the zcashd specific dependencies which would suddenly change the behavior for build-users with no corresponding code change in this repo.</li>\n<li>If a build-user uses the option above to disable binary caching on a system with nothing cached, this results in building <em>the entire</em> toolchain from scratch. I have not yet run that to completion. (This may be useful in the future for reproducible builds and/or cached CI-local full toolchain builds.)</li>\n<li>A middle ground would be to use the binary cache for everything from <code class=\"notranslate\">nixpkgs</code> by default, and never use the binary cache for any zcash-specific derivations. This is the current behavior so-long-as nobody uploads zcash-specific binaries to the nixos cache. It'd be best to explicitly code this behavior so that the state of the cache is irrelevant.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> This PR should <em>not</em> modify any files outside of the <code class=\"notranslate\">./contrib/nix</code> <em>except</em> a blurb in the changelog.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> This PR should build all of the scaffolding necessary to run a full local QA pass and that should detect no regressions.</li>\n</ul>\n<h2 dir=\"auto\">MVP non-goals:</h2>\n<p dir=\"auto\">These things aren't in scope for this PR, but we hope to address later:</p>\n<ul dir=\"auto\">\n<li>All of the build/configure options available in <code class=\"notranslate\">./depends</code> (for example switching between debug/release builds of dependencies).</li>\n<li>Close-to-binary-identical builds as <code class=\"notranslate\">./depends</code>. (This may be very hard but would be awesome.)</li>\n<li>Building on systems other than x86_64 gnu linux.</li>\n<li>Cross-builds.</li>\n<li>Reproducible builds.</li>\n<li>\"Exportable\" built artifacts. They may be nix specific (eg: downloadable linux binary tarballs aren't a current target).</li>\n<li>CI integration.</li>\n<li>Better \"incremental build\" support so that nix builds are faster during feature development. (For example, break out <code class=\"notranslate\">librustzcash</code> build from the C++ build, or break other similar large pieces out, â€¦)</li>\n</ul>\n<h2 dir=\"auto\">Merge Roadmap</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Move <code class=\"notranslate\">./nix</code> to <code class=\"notranslate\">./contrib/nix</code> to signal that this build system isn't production and isn't required, and is just an extra thing (currently) for some users to explore.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Simplify the framework: remove <code class=\"notranslate\">source = \"github\"</code> feature.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Simplification: Remove some utility code that's already in the std lib (esp. <code class=\"notranslate\">lib.trivial</code>).</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Check for other possible simplifications.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Add local QA build targets and verify that detects no regressions on my dev machine.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <strong>(?)</strong> Incorporate <code class=\"notranslate\">native_cctools</code>: the current revision does not use those build tools at all, and instead use the nix defaults (ie: gcc, et al.) A recent commit uses the <code class=\"notranslate\">nixpkgs clang</code> and is very succinct, so what about allowing the nix build to have this one exception versus <code class=\"notranslate\">./depends</code>? See <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"716291643\" data-permission-text=\"Title is private\" data-url=\"https://github.com/zcash/zcash/issues/4767\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/zcash/zcash/pull/4767/hovercard?comment_id=706002996&amp;comment_type=issue_comment\" href=\"https://github.com/zcash/zcash/pull/4767#issuecomment-706002996\">#4767 (comment)</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Create a new squashed branch (?) or refactor the git history according to reviewer suggestions.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Verify that the MVP goals are met.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Update the release changelog.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Incorporate any blocking reviewer feedback.</li>\n</ul>\n<h2 dir=\"auto\">Review Guide</h2>\n<p dir=\"auto\">I recommend this order:</p>\n<ol dir=\"auto\">\n<li>The <code class=\"notranslate\">README.md</code> and <code class=\"notranslate\">README-dev.md</code> should give you an idea of the structure/design and usage, even if you're not familiar with nix.</li>\n<li>Do the <code class=\"notranslate\">./contrib/nix/packages/*.{toml,sh}</code> files seem to match the <code class=\"notranslate\">./depends/packages/*.mk</code> files? What about hashes and patches? What about build flags, given that this PR \"hardcodes\" <code class=\"notranslate\">x86_64</code> gnu linux options and \"release\" modes?</li>\n<li>To review the nix stuff if you're unfamiliar with nix, I recommend just diving into <code class=\"notranslate\">./contrib/nix/default.nix</code> and trying to read it de novo, then doing \"bread first\", especially <code class=\"notranslate\">zcash.nix</code>.</li>\n<li>Whenever you see <code class=\"notranslate\">mkDerivation</code>, that represents building a package. The zcash derivation has no <code class=\"notranslate\">builder</code> attribute, which means it uses the default <code class=\"notranslate\">nix</code> build script, which is effectively <code class=\"notranslate\">./configure; make; make install</code> with appropriate flags.</li>\n<li>The stuff in <code class=\"notranslate\">./contrib/nix/util</code> is mostly scaffolding. The most important piece there is <code class=\"notranslate\">./contrib/nix/util/nixpkgs.nix</code> because this pins all of the nix dev toolchain to a specific hash. This transitively pins things like <code class=\"notranslate\">gcc</code>, <code class=\"notranslate\">make</code>, etc...</li>\n<li>The <code class=\"notranslate\">./depends</code> consistency safeguards live in <code class=\"notranslate\">./contrib/nix/packages/parser</code>.</li>\n<li>The <code class=\"notranslate\">meta</code> directory is fun but not necessary: it builds some self-analysis artifacts.</li>\n<li><strong>Security Review:</strong> I am leery of nix's \"binary build cache\". I believe there's a central server and by default \"nix install foo\" asks the server \"do you have binaries for <code class=\"notranslate\">foo</code>?\". While nix aims for reproducibility, it still seems like this relies too much on that system which could inject malicious code. This nix build should <em>not</em> be vulnerable to that server!</li>\n</ol>\n<p dir=\"auto\">How can we verify or make it easier to verify that the right compiler toolchains and flags are used?</p>\n<h2 dir=\"auto\">Template Checklist</h2>\n<blockquote>\n<p dir=\"auto\">Please ensure this checklist is followed for any pull requests for this repo. This checklist must be checked by both the &gt; PR creator and by anyone who reviews the PR.</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Relevant documentation for this PR has to be completed and reviewed by <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/mdr0id/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mdr0id\">@mdr0id</a> before the PR can be merged</li>\n</ul>\n</blockquote>\n<p dir=\"auto\">This PR introduces a new \"nix\" subfolder tree, and that tree should have useful accurate docs. The goal for merging this branch is to introduce an optional \"contrib\" style alternative build system, so most users/devs should not need to know about it, only those who specifically want to use it, so it doesn't need any other docs except maybe a release changelog entry.</p>\n<blockquote>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> A test plan for the PR must be documented in the PR notes and included in the test plan for the next regular release</li>\n</ul>\n</blockquote>\n<p dir=\"auto\"><em>This branch doesn't have automated test coverage yet.</em></p>\n<p dir=\"auto\">However, the nix build itself does do a safety check to ensure all of the dependencies match the <code class=\"notranslate\">./depends</code> system, so a basic automated test would look like this:</p>\n<ul dir=\"auto\">\n<li>The test running environment would be a linux host with nix installed as (the only) prerequisite.</li>\n<li>The automated test runs <code class=\"notranslate\">nix build ./nix</code>.</li>\n<li>The automated test verifies that <code class=\"notranslate\">./result/bin/zcashd --version</code> prints out the expected version string.</li>\n</ul>\n<p dir=\"auto\">A better test framework would run a full battery of QA tests against that binary.</p>\n<blockquote>\n<p dir=\"auto\">As a note, all buildbot tests need to be passing and all appropriate code reviews need to be done before this PR can be merged</p>\n</blockquote>",
            "url": "https://github.com/zcash/zcash/pull/4767",
            "title": "proof-of-concept nix build system (work in progress)",
            "date_modified": "2022-07-22T18:56:46.000Z",
            "date_published": "2020-10-07T07:54:27.000Z",
            "author": {
                "name": "nathan-at-least",
                "url": "https://github.com/nathan-at-least"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/153175?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h6 dir=\"auto\">Motivation for this change</h6>\n<p dir=\"auto\">Podman generates and loads its AppArmor profile at runtime, for this is<br>\nneeds <code class=\"notranslate\">apparmor_parser</code> to be in $PATH.</p>\n<p dir=\"auto\">Podman detects at runtime if /etc/apparmor.d/tunables/global is present<br>\nand, if so, <code class=\"notranslate\">include</code>s it in the runtime-generated profile. If itâ€™s not<br>\nfound then it does not, but then the profile fails to load successfully<br>\nbecause <code class=\"notranslate\">â€¦/abstractions/base</code> <em>is</em> found and that implicitly depends on<br>\n<code class=\"notranslate\">â€¦/tunables/global</code>.</p>\n<p dir=\"auto\">Prevent future breakage with a dedicated test for Podman AppArmor<br>\nconfinement with the default profile.</p>\n<p dir=\"auto\">If this solution is acceptable I may also work on a similar fix for Docker as it seems to be broken as well (see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"208664832\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nixpkgs/issues/22953\" data-hovercard-type=\"issue\" data-hovercard-url=\"/NixOS/nixpkgs/issues/22953/hovercard\" href=\"https://github.com/NixOS/nixpkgs/issues/22953\">#22953</a>) and a lot of the underlying AppArmor integration code is shared between the two, I think.</p>\n<h6 dir=\"auto\">Things done</h6>\n<p dir=\"auto\">Testing was done on latest nixos-unstable (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/NixOS/nixpkgs/commit/715f63411952c86c8f57ab9e3e3cb866a015b5f2/hovercard\" href=\"https://github.com/NixOS/nixpkgs/commit/715f63411952c86c8f57ab9e3e3cb866a015b5f2\"><tt>715f634</tt></a>).</p>\n<ul class=\"contains-task-list\">\n<li>Built on platform(s)\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> x86_64-linux</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> aarch64-linux</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> x86_64-darwin</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> aarch64-darwin</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> For non-Linux: Is <code class=\"notranslate\">sandbox = true</code> set in <code class=\"notranslate\">nix.conf</code>? (See <a href=\"https://nixos.org/manual/nix/stable/command-ref/conf-file.html\" rel=\"nofollow\">Nix manual</a>)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Tested, as applicable:\n<ul dir=\"auto\">\n<li><a href=\"https://nixos.org/manual/nixos/unstable/index.html#sec-nixos-tests\" rel=\"nofollow\">NixOS test(s)</a> (look inside <a href=\"https://github.com/NixOS/nixpkgs/blob/master/nixos/tests\">nixos/tests</a>)</li>\n<li>and/or <a href=\"https://nixos.org/manual/nixpkgs/unstable/#sec-package-tests\" rel=\"nofollow\">package tests</a></li>\n<li>or, for functions and \"core\" functionality, tests in <a href=\"https://github.com/NixOS/nixpkgs/blob/master/lib/tests\">lib/tests</a> or <a href=\"https://github.com/NixOS/nixpkgs/blob/master/pkgs/test\">pkgs/test</a></li>\n<li>made sure NixOS tests are <a href=\"https://nixos.org/manual/nixpkgs/unstable/#ssec-nixos-tests-linking\" rel=\"nofollow\">linked</a> to the relevant packages</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Tested compilation of all packages that depend on this change using <code class=\"notranslate\">nix-shell -p nixpkgs-review --run \"nixpkgs-review rev HEAD\"</code>. Note: all changes have to be committed, also see <a href=\"https://github.com/Mic92/nixpkgs-review#usage\">nixpkgs-review usage</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Tested basic functionality of all binary files (usually in <code class=\"notranslate\">./result/bin/</code>)</li>\n<li><a href=\"https://github.com/NixOS/nixpkgs/blob/master/CONTRIBUTING.md#generating-2111-release-notes\">21.11 Release Notes (or backporting 21.05 Release notes)</a>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> (Package updates) Added a release notes entry if the change is major or breaking</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> (Module updates) Added a release notes entry if the change is significant</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> (Module addition) Added a release notes entry if adding a new NixOS module</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> (Release notes changes) Ran <code class=\"notranslate\">nixos/doc/manual/md-to-db.sh</code> to update generated release notes</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Fits <a href=\"https://github.com/NixOS/nixpkgs/blob/master/CONTRIBUTING.md\">CONTRIBUTING.md</a>.</li>\n</ul>",
            "url": "https://github.com/NixOS/nixpkgs/pull/146969",
            "title": "nixos/podman: Fix AppArmor support",
            "date_modified": "2022-07-10T18:18:29.000Z",
            "date_published": "2021-11-22T05:18:41.000Z",
            "author": {
                "name": "amarshall",
                "url": "https://github.com/amarshall"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19142786?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h6 dir=\"auto\">Motivation for this change</h6>\n<p dir=\"auto\">Copy locations from vhost-options.nix so can be nested.</p>\n<h6 dir=\"auto\">Things done</h6>\n\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Tested using sandboxing (<a href=\"http://nixos.org/nixos/manual/options.html#opt-nix.useSandbox\" rel=\"nofollow\">nix.useSandbox</a> on NixOS, or option <code class=\"notranslate\">build-use-sandbox</code> in <a href=\"http://nixos.org/nix/manual/#sec-conf-file\" rel=\"nofollow\"><code class=\"notranslate\">nix.conf</code></a> on non-NixOS)</li>\n<li>Built on platform(s)\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> NixOS</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> macOS</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> other Linux distributions</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Tested via one or more NixOS test(s) if existing and applicable for the change (look inside <a href=\"https://github.com/NixOS/nixpkgs/blob/master/nixos/tests\">nixos/tests</a>)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Tested compilation of all pkgs that depend on this change using <code class=\"notranslate\">nix-shell -p nox --run \"nox-review wip\"</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Tested execution of all binary files (usually in <code class=\"notranslate\">./result/bin/</code>)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Fits <a href=\"https://github.com/NixOS/nixpkgs/blob/master/.github/CONTRIBUTING.md\">CONTRIBUTING.md</a>.</li>\n</ul>\n<hr>",
            "url": "https://github.com/NixOS/nixpkgs/pull/40303",
            "title": "nginx service: add nested locations support",
            "date_modified": "2023-03-05T22:58:11.000Z",
            "date_published": "2018-05-10T20:38:26.000Z",
            "author": {
                "name": "sshisk",
                "url": "https://github.com/sshisk"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/137852?u=988fa6ca6d2fb7c816331444241c865ad2a494a4&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h6 dir=\"auto\">Description of changes</h6>\n<p dir=\"auto\">Strip any <code class=\"notranslate\">(asdf:defsystem ..</code> that is not for the specific system we want to build. Fixes at least <code class=\"notranslate\">cl-async</code>, which has a .asd with multiple defsystems, which causes problems as the wrong (non-precompiled) package is loaded at build time, which then tries to compile after the fact, putting a .fasl in a read-only location (the store), breaking the system.</p>\n<p dir=\"auto\">See <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1109164093\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nixpkgs/issues/155851\" data-hovercard-type=\"issue\" data-hovercard-url=\"/NixOS/nixpkgs/issues/155851/hovercard?comment_id=1282943598&amp;comment_type=issue_comment\" href=\"https://github.com/NixOS/nixpkgs/issues/155851#issuecomment-1282943598\">#155851 (comment)</a></p>\n<h6 dir=\"auto\">Things done</h6>\n<p dir=\"auto\"><strong>I WOULD LOVE A SECOND PAIR OF EYES ON THIS!</strong> Please sanity check this! I am worried it might have false positives.</p>\n<ul class=\"contains-task-list\">\n<li>Built on platform(s)\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> x86_64-linux</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> aarch64-linux</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> x86_64-darwin</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> aarch64-darwin</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> For non-Linux: Is <code class=\"notranslate\">sandbox = true</code> set in <code class=\"notranslate\">nix.conf</code>? (See <a href=\"https://nixos.org/manual/nix/stable/command-ref/conf-file.html\" rel=\"nofollow\">Nix manual</a>)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Tested, as applicable:\n<ul dir=\"auto\">\n<li><a href=\"https://nixos.org/manual/nixos/unstable/index.html#sec-nixos-tests\" rel=\"nofollow\">NixOS test(s)</a> (look inside <a href=\"https://github.com/NixOS/nixpkgs/blob/master/nixos/tests\">nixos/tests</a>)</li>\n<li>and/or <a href=\"https://nixos.org/manual/nixpkgs/unstable/#sec-package-tests\" rel=\"nofollow\">package tests</a></li>\n<li>or, for functions and \"core\" functionality, tests in <a href=\"https://github.com/NixOS/nixpkgs/blob/master/lib/tests\">lib/tests</a> or <a href=\"https://github.com/NixOS/nixpkgs/blob/master/pkgs/test\">pkgs/test</a></li>\n<li>made sure NixOS tests are <a href=\"https://nixos.org/manual/nixpkgs/unstable/#ssec-nixos-tests-linking\" rel=\"nofollow\">linked</a> to the relevant packages</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Tested compilation of all packages that depend on this change using <code class=\"notranslate\">nix-shell -p nixpkgs-review --run \"nixpkgs-review rev HEAD\"</code>. Note: all changes have to be committed, also see <a href=\"https://github.com/Mic92/nixpkgs-review#usage\">nixpkgs-review usage</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Tested basic functionality of all binary files (usually in <code class=\"notranslate\">./result/bin/</code>)</li>\n<li><a href=\"https://github.com/NixOS/nixpkgs/blob/master/CONTRIBUTING.md#generating-2211-release-notes\">22.11 Release Notes (or backporting 22.05 Release notes)</a>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> (Package updates) Added a release notes entry if the change is major or breaking</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> (Module updates) Added a release notes entry if the change is significant</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> (Module addition) Added a release notes entry if adding a new NixOS module</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> (Release notes changes) Ran <code class=\"notranslate\">nixos/doc/manual/md-to-db.sh</code> to update generated release notes</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Fits <a href=\"https://github.com/NixOS/nixpkgs/blob/master/CONTRIBUTING.md\">CONTRIBUTING.md</a>.</li>\n</ul>\n",
            "url": "https://github.com/NixOS/nixpkgs/pull/196818",
            "title": "lisp-modules-new: strip any unrelated defsystem from the .asd",
            "date_modified": "2022-10-20T17:11:32.000Z",
            "date_published": "2022-10-19T21:29:59.000Z",
            "author": {
                "name": "hraban",
                "url": "https://github.com/hraban"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1055245?u=c9769cefdf870911a6981ddc77c1b6d6502e4155&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Ever since the closing of <a href=\"https://github.com/NixOS/rfcs/pull/49\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/NixOS/rfcs/pull/49/hovercard\">RFC 49</a>, we've had the new CLI and Flakes marked as experimental, with no clear plan forward.</p>\n<p dir=\"auto\">With the goal of ending this current limbo and soothe longstanding tensions in the Nix community, this RFC does two things:</p>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">Establish general principles about Nix's architecture and evolution in order to ensure we do not get in this situation again.</p>\n<p dir=\"auto\">Notably we are allowed to make breaking changes to experimental features, which includes both the new CLI and Flakes, until they are stable.</p>\n</li>\n<li>\n<p dir=\"auto\">Establish an incremental plan adhering to the principles deciding on the order and priority in which to stabilize these features:</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">First, the non-Flakes CLI wll be stabilized, in phases.</p>\n</li>\n<li>\n<p dir=\"auto\">Afterwards, Flakes itself and its CLI components can be stabilized. The final design of Flakes will also require another RFC.</p>\n</li>\n</ul>\n</li>\n</ol>\n<p dir=\"auto\"><a href=\"https://github.com/Ericson2314/nix-rfcs/blob/stabilize-incrementally/rfcs/0136-stabilize-incrementally.md\">Rendered</a></p>\n<hr>\n<p dir=\"auto\"><em>A note to anyone leaving comments, remember the point of this RFC is <em>not</em> to debate the <strong>content</strong> of what is being stabilized, but debate the <strong>process</strong> of stabilization. To my fellow Flakes skeptics in particular, please hold back on the minutiae what you think is wrong with the design of Flakes, the new CLI or other features, or we will end up with another monster RFC thread that goes nowhere.</em></p>\n<p dir=\"auto\"><em>The current trajectory as far as I can tell, prior to writing this. is that we all of the sudden get a Nix 3.0 where a huge swath of stuff without review becomes stable at once. This is because many people in charge feel exhausted, and fear properly audit and debate the new features will devolve into yet another messy useless flame war.</em></p>\n<p dir=\"auto\"><em>Only by keeping the conversation narrowly on topic can demonstrate that a cordial compromise is possible</em></p>",
            "url": "https://github.com/NixOS/rfcs/pull/136",
            "title": "[RFC 0136] A plan to stabilize Flakes and the new CLI incrementally",
            "date_modified": "2023-05-25T09:30:54.000Z",
            "date_published": "2022-10-03T16:40:46.000Z",
            "author": {
                "name": "Ericson2314",
                "url": "https://github.com/Ericson2314"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1785925?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Commit <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/NixOS/nixpkgs/commit/c2b898da7623a39e3c9b6265d311fe182aa526f0/hovercard\" href=\"https://github.com/NixOS/nixpkgs/commit/c2b898da7623a39e3c9b6265d311fe182aa526f0\"><tt>c2b898d</tt></a> removed the mechanism; now it's replaced by a different one with higher limit of $(nproc) * 2.</p>\n<p dir=\"auto\">Unfortunately there's no good mechanism how to override it from outside like <code class=\"notranslate\">--cores</code> or <code class=\"notranslate\">--max-jobs</code>, but at least the new limit should be high enough to avoid the previous downsides.</p>",
            "url": "https://github.com/NixOS/nixpkgs/pull/192799",
            "title": "stdenv: reintroduce limiting by system load",
            "date_modified": "2022-09-27T06:07:54.000Z",
            "date_published": "2022-09-24T17:43:58.000Z",
            "author": {
                "name": "vcunat",
                "url": "https://github.com/vcunat"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/61860346?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h6 dir=\"auto\">Motivation for this change</h6>\n<p dir=\"auto\"><a href=\"https://blog.fpmurphy.com/2008/06/position-independent-executables.html\" rel=\"nofollow\">https://blog.fpmurphy.com/2008/06/position-independent-executables.html</a></p>\n<blockquote>\n<p dir=\"auto\">PIE is an address space randomization technique that compiles &amp; links executables to be position independent, i.e. machine instruction code that executes properly regardless of where in memory it actually resides. When combined with a kernel that can recognize it is loading a PIE binary, the kernel loads it into a random address instead of the traditional fixed address locations.</p>\n</blockquote>\n<p dir=\"auto\"><a href=\"https://fedoraproject.org/wiki/Security_Features_Matrix#Address_Space_Layout_Randomization_.28ASLR.29\" rel=\"nofollow\">https://fedoraproject.org/wiki/Security_Features_Matrix#Address_Space_Layout_Randomization_.28ASLR.29</a></p>\n<blockquote>\n<p dir=\"auto\">This makes memory addresses harder to predict when an attacker is attempting a memory-corruption exploit.<br>\nTo make ASLR effective all segments must be randomized. Leaving the text segment loading address non-randomized reduces the protection provided by the ASLR since the attackers can use ret2text attacks. The loading address of the text segment in a binary can be randomized by building the binary as PIE (Position Independent Executable).</p>\n</blockquote>\n<p dir=\"auto\"><a href=\"https://fedoraproject.org/wiki/Changes/Harden_All_Packages#Detailed_Harden_Flags_Description\" rel=\"nofollow\">https://fedoraproject.org/wiki/Changes/Harden_All_Packages#Detailed_Harden_Flags_Description</a></p>\n<blockquote>\n<p dir=\"auto\">Copy relocations support in GCC 5 and binutils 2.26 makes the performance [decrease] on x86_64 of PIE literally zero for many programs.</p>\n</blockquote>\n<h6 dir=\"auto\">Things done</h6>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Tested using sandboxing (<a href=\"https://nixos.org/nixos/manual/options.html#opt-nix.useSandbox\" rel=\"nofollow\">nix.useSandbox</a> on NixOS, or option <code class=\"notranslate\">sandbox</code> in <a href=\"https://nixos.org/nix/manual/#sec-conf-file\" rel=\"nofollow\"><code class=\"notranslate\">nix.conf</code></a> on non-NixOS linux)</li>\n<li>Built on platform(s)\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> NixOS</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Tested execution of all binary files (usually in <code class=\"notranslate\">./result/bin/</code>)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Ensured that relevant documentation is up to date</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Fits <a href=\"https://github.com/NixOS/nixpkgs/blob/master/.github/CONTRIBUTING.md\">CONTRIBUTING.md</a>.</li>\n</ul>",
            "url": "https://github.com/NixOS/nixpkgs/pull/104091",
            "title": "treewide: enable security hardening flags",
            "date_modified": "2021-10-26T09:53:15.000Z",
            "date_published": "2020-11-17T20:45:13.000Z",
            "author": {
                "name": "TredwellGit",
                "url": "https://github.com/TredwellGit"
            }
        }
    ]
}