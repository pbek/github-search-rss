{
    "version": "https://jsonfeed.org/version/1",
    "title": "NixOS Package PRs for jq-1.6",
    "home_page_url": "https://pbek.github.io/github-search-rss/nixos-jq-1.6.json",
    "feed_url": "https://pbek.github.io/github-search-rss/nixos-jq-1.6.json",
    "description": "NixOS Package PRs for jq-1.6 on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/50854?u=fd6e13df7b55e0682d61a74389279b3a4cd246c1&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h6 dir=\"auto\">Description of changes</h6>\n<p dir=\"auto\">jq has not seen a release in four years, despite a bug that silently mangles large numbers being fixed several years ago. Let's just use git HEAD instead.</p>\n<h6 dir=\"auto\">Things done</h6>\n\n<ul class=\"contains-task-list\">\n<li>Built on platform(s)\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> x86_64-linux</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> aarch64-linux</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> x86_64-darwin</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> aarch64-darwin</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> For non-Linux: Is <code class=\"notranslate\">sandbox = true</code> set in <code class=\"notranslate\">nix.conf</code>? (See <a href=\"https://nixos.org/manual/nix/stable/command-ref/conf-file.html\" rel=\"nofollow\">Nix manual</a>)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Tested, as applicable:\n<ul dir=\"auto\">\n<li><a href=\"https://nixos.org/manual/nixos/unstable/index.html#sec-nixos-tests\" rel=\"nofollow\">NixOS test(s)</a> (look inside <a href=\"https://github.com/NixOS/nixpkgs/blob/master/nixos/tests\">nixos/tests</a>)</li>\n<li>and/or <a href=\"https://nixos.org/manual/nixpkgs/unstable/#sec-package-tests\" rel=\"nofollow\">package tests</a></li>\n<li>or, for functions and \"core\" functionality, tests in <a href=\"https://github.com/NixOS/nixpkgs/blob/master/lib/tests\">lib/tests</a> or <a href=\"https://github.com/NixOS/nixpkgs/blob/master/pkgs/test\">pkgs/test</a></li>\n<li>made sure NixOS tests are <a href=\"https://nixos.org/manual/nixpkgs/unstable/#ssec-nixos-tests-linking\" rel=\"nofollow\">linked</a> to the relevant packages</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Tested compilation of all packages that depend on this change using <code class=\"notranslate\">nix-shell -p nixpkgs-review --run \"nixpkgs-review rev HEAD\"</code>. Note: all changes have to be committed, also see <a href=\"https://github.com/Mic92/nixpkgs-review#usage\">nixpkgs-review usage</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Tested basic functionality of all binary files (usually in <code class=\"notranslate\">./result/bin/</code>)</li>\n<li><a href=\"https://github.com/NixOS/nixpkgs/blob/master/CONTRIBUTING.md#generating-2305-release-notes\">23.05 Release Notes (or backporting 22.11 Release notes)</a>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> (Package updates) Added a release notes entry if the change is major or breaking</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> (Module updates) Added a release notes entry if the change is significant</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> (Module addition) Added a release notes entry if adding a new NixOS module</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Fits <a href=\"https://github.com/NixOS/nixpkgs/blob/master/CONTRIBUTING.md\">CONTRIBUTING.md</a>.</li>\n</ul>\n",
            "url": "https://github.com/NixOS/nixpkgs/pull/217345",
            "title": "jq: 1.6 -> 2022-05-26",
            "date_modified": "2023-02-27T19:19:02.000Z",
            "date_published": "2023-02-20T18:49:12.000Z",
            "author": {
                "name": "edef1c",
                "url": "https://github.com/edef1c"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/20525370?u=3eca42cd1f8dd49002816cd842937abef0d1b030&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h1 dir=\"auto\">Motivation</h1>\n<p dir=\"auto\">Adds simple Python bindings for Nix evaluation, initialized from <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Mic92/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Mic92\">@Mic92</a>'s archived <a href=\"https://github.com/Mic92/pythonix\">Pythonix</a> (including the license), but then updated to work with the latest Nix version. This relates to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1438407433\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nix/issues/7271\" data-hovercard-type=\"issue\" data-hovercard-url=\"/NixOS/nix/issues/7271/hovercard\" href=\"https://github.com/NixOS/nix/issues/7271\">#7271</a></p>\n<p dir=\"auto\">Just like the existing Perl bindings under <code class=\"notranslate\">pkgs.nix.perl-bindings</code>, these Python bindings are available as a separate derivation under <code class=\"notranslate\">pkgs.nix.python-bindings</code>. This is a Python package that can be used as <code class=\"notranslate\">python.withPackages (p: [ pkgs.nix.python-bindings ]</code></p>\n<p dir=\"auto\">The API currently is just a single function:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">nix.eval(str, vars: dict)</code><br>\nEvaluates the Nix expression <code class=\"notranslate\">str</code> with variables <code class=\"notranslate\">vars</code> in scope. <code class=\"notranslate\">vars</code> is transparently converted from Python values to Nix values. The result of this function is transparently converted from a Nix value to a Python value.</li>\n</ul>\n<p dir=\"auto\">An example:</p>\n<details>\n<summary>flake.nix</summary>\n<div class=\"highlight highlight-source-nix notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  inputs.nix.url = &quot;github:tweag/nix/python-bindings&quot;;\n  inputs.nixpkgs.follows = &quot;nix/nixpkgs&quot;;\n  inputs.flake-utils.url = &quot;github:numtide/flake-utils&quot;;\n\n  outputs = { nix, nixpkgs, flake-utils, ... }: flake-utils.lib.eachDefaultSystem (system: {\n    defaultPackage = nixpkgs.legacyPackages.${system}.pkgs.python3.withPackages (p: [\n      nix.packages.${system}.nix.python-bindings\n    ]);\n  });\n}\"><pre class=\"notranslate\">{\n  <span class=\"pl-e\">inputs</span>.<span class=\"pl-e\">nix</span>.<span class=\"pl-e\">url</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>github:tweag/nix/python-bindings<span class=\"pl-pds\">\"</span></span>;\n  <span class=\"pl-e\">inputs</span>.<span class=\"pl-e\">nixpkgs</span>.<span class=\"pl-e\">follows</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nix/nixpkgs<span class=\"pl-pds\">\"</span></span>;\n  <span class=\"pl-e\">inputs</span>.<span class=\"pl-e\">flake-utils</span>.<span class=\"pl-e\">url</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>github:numtide/flake-utils<span class=\"pl-pds\">\"</span></span>;\n\n  <span class=\"pl-e\">outputs</span> <span class=\"pl-k\">=</span> { <span class=\"pl-smi\">nix</span><span class=\"pl-k\">,</span> <span class=\"pl-smi\">nixpkgs</span><span class=\"pl-k\">,</span> <span class=\"pl-smi\">flake-utils</span><span class=\"pl-k\">,</span> <span class=\"pl-k\">... </span>}: <span class=\"pl-v\">flake-utils</span><span class=\"pl-k\">.</span><span class=\"pl-v\">lib</span><span class=\"pl-k\">.</span><span class=\"pl-v\">eachDefaultSystem</span> (<span class=\"pl-smi\">system</span>: {\n    <span class=\"pl-e\">defaultPackage</span> <span class=\"pl-k\">=</span> <span class=\"pl-v\">nixpkgs</span><span class=\"pl-k\">.</span><span class=\"pl-v\">legacyPackages</span><span class=\"pl-k\">.</span><span class=\"pl-pse\">${</span><span class=\"pl-v\">system</span><span class=\"pl-pse\">}</span><span class=\"pl-k\">.</span><span class=\"pl-v\">pkgs</span><span class=\"pl-k\">.</span><span class=\"pl-v\">python3</span><span class=\"pl-k\">.</span><span class=\"pl-v\">withPackages</span> (<span class=\"pl-smi\">p</span>: [\n      <span class=\"pl-v\">nix</span><span class=\"pl-k\">.</span><span class=\"pl-v\">packages</span><span class=\"pl-k\">.</span><span class=\"pl-pse\">${</span><span class=\"pl-v\">system</span><span class=\"pl-pse\">}</span><span class=\"pl-k\">.</span><span class=\"pl-v\">nix</span><span class=\"pl-k\">.</span><span class=\"pl-v\">python-bindings</span>\n    ]);\n  });\n}</pre></div>\n</details>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ nix run\nPython 3.10.8 (main, Oct 11 2022, 11:35:05) [GCC 11.3.0] on linux\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n&gt;&gt;&gt; import nix\n&gt;&gt;&gt; nix.eval(&quot;1 + a&quot;, vars=dict(a = 2))\n3\"><pre class=\"notranslate\"><code class=\"notranslate\">$ nix run\nPython 3.10.8 (main, Oct 11 2022, 11:35:05) [GCC 11.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import nix\n&gt;&gt;&gt; nix.eval(\"1 + a\", vars=dict(a = 2))\n3\n</code></pre></div>\n<p dir=\"auto\">This work is sponsored by <a href=\"https://antithesis.com/\" rel=\"nofollow\">Antithesis</a> <g-emoji class=\"g-emoji\" alias=\"sparkles\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2728.png\">✨</g-emoji></p>\n<h1 dir=\"auto\">TODO</h1>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Confirm that the Pythonix source code can be used: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1566981515\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nix/issues/7735\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/NixOS/nix/pull/7735/hovercard?comment_id=1093829625&amp;comment_type=review_comment\" href=\"https://github.com/NixOS/nix/pull/7735#discussion_r1093829625\">#7735 (comment)</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Make the build work, both incrementally for development and in CI</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Mark as experimental (<a href=\"https://github.com/NixOS/nix/pull/7735#issuecomment-1415853274\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/NixOS/nix/pull/7735/hovercard\">decided by the Nix Team</a>)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Write more tests</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Write documentation\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> How to develop the bindings</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Manual page for how to use the bindings</li>\n</ul>\n</li>\n</ul>\n<h1 dir=\"auto\">Context</h1>\n<p dir=\"auto\">The motivation for this is better tests for library functions in nixpkgs. Previous efforts:</p>\n<ul dir=\"auto\">\n<li>Using <a href=\"https://github.com/bats-core/bats-core\">bats</a>: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1327316875\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nixpkgs/issues/185022\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/NixOS/nixpkgs/pull/185022/hovercard\" href=\"https://github.com/NixOS/nixpkgs/pull/185022\">NixOS/nixpkgs#185022</a></li>\n<li>Using awk for generating property tests: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1485434623\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nixpkgs/issues/205190\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/NixOS/nixpkgs/pull/205190/hovercard\" href=\"https://github.com/NixOS/nixpkgs/pull/205190\">NixOS/nixpkgs#205190</a>, <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1519661931\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nixpkgs/issues/209099\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/NixOS/nixpkgs/pull/209099/hovercard?comment_id=1069177623&amp;comment_type=review_comment\" href=\"https://github.com/NixOS/nixpkgs/pull/209099#discussion_r1069177623\">NixOS/nixpkgs#209099 (comment)</a> and <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1558912770\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nixpkgs/issues/212858\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/NixOS/nixpkgs/pull/212858/hovercard\" href=\"https://github.com/NixOS/nixpkgs/pull/212858\">NixOS/nixpkgs#212858</a></li>\n</ul>\n<p dir=\"auto\">In particular <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1558912770\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nixpkgs/issues/212858\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/NixOS/nixpkgs/pull/212858/hovercard\" href=\"https://github.com/NixOS/nixpkgs/pull/212858\">NixOS/nixpkgs#212858</a> highlighted that property tests are currently either slow (if using the Nix CLI) or limited (if you work around this by cramming everything into a single Nix CLI call, which then means you can't test error messages anymore).</p>\n<p dir=\"auto\">I then instead focused on <a href=\"https://github.com/Mic92/pythonix\">Pythonix</a>, third-party Python bindings for the Nix evaluator. By using Python for testing we can use the Python ecosystem (such as property testing using <a href=\"https://hypothesis.readthedocs.io/\" rel=\"nofollow\">Hypothesis</a>), and by it linking to the Nix library it's much faster and we can test error messages too. Unfortunately Pythonix was archived due to being too hard to maintain, since the library interface isn't stable. So the fix is to just upstream it instead.</p>\n<h1 dir=\"auto\">Checklist for maintainers</h1>\n<p dir=\"auto\">Maintainers: tick if completed or explain if not relevant</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> agreed on idea</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> agreed on implementation strategy</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> tests, as appropriate\n<ul dir=\"auto\">\n<li>functional tests - <code class=\"notranslate\">tests/**.sh</code></li>\n<li>unit tests - <code class=\"notranslate\">src/*/tests</code></li>\n<li>integration tests - <code class=\"notranslate\">tests/nixos/*</code></li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> documentation in the manual</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> code and comments are self-explanatory</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> commit message explains why the change was made</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> new feature or bug fix: updated release notes</li>\n</ul>",
            "url": "https://github.com/NixOS/nix/pull/7735",
            "title": "Experimental python bindings",
            "date_modified": "2023-04-21T08:52:09.000Z",
            "date_published": "2023-02-01T23:00:31.000Z",
            "author": {
                "name": "infinisil",
                "url": "https://github.com/infinisil"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/63433?u=13856ed2ddf5c360988ae3e3888e2f4a9205660f&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h6 dir=\"auto\">Motivation</h6>\n<p dir=\"auto\">The goal of this PR is to generalize secrets handling in a way which accompanies <a href=\"https://github.com/NixOS/rfcs/blob/master/rfcs/0042-config-option.md\">RFC 0042</a> well.</p>\n<p dir=\"auto\">Currently, it's up to each and every module to handle secrets individually. This is usually done by providing one option for every secret, each accepting a path to a file which should be read at runtime to fetch the secret value. The modules declare these options explicitly and have to implement a way to read the secrets at runtime.</p>\n<p dir=\"auto\">In this PR I'm trying to move the responsibility of implementing secrets handling from the modules to <code class=\"notranslate\">pkgs.formats</code>. This means that when these formats are used, for example in freeform modules, any option can be declared secret if the user so wishes. In turn, this renders the third type of value listed in <a href=\"https://github.com/NixOS/rfcs/blob/master/rfcs/0042-config-option.md#valuable-options\">https://github.com/NixOS/rfcs/blob/master/rfcs/0042-config-option.md#valuable-options</a>, <code class=\"notranslate\">Sensitive data, passwords</code>, unnecessary, as long as the secrets are specified in the configuration file.</p>\n<h6 dir=\"auto\">Implementation</h6>\n<p dir=\"auto\">Introduce a new <code class=\"notranslate\">secret</code> type and an accompanying <code class=\"notranslate\">mkSecret</code> function. Implement handling of secrets in <code class=\"notranslate\">formats.json</code>, <code class=\"notranslate\">formats.ini</code>, <code class=\"notranslate\">formats.yaml</code> and <code class=\"notranslate\">formats.toml</code>.</p>\n<p dir=\"auto\">I'm not considering any of this final, hence why it's marked as a draft. I just got it into a working state and figured it was time to ask for opinions before polishing it too much :)</p>\n<h6 dir=\"auto\">Things done</h6>\n\n<ul class=\"contains-task-list\">\n<li>Built on platform(s)\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> x86_64-linux</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> aarch64-linux</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> x86_64-darwin</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> aarch64-darwin</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> For non-Linux: Is <code class=\"notranslate\">sandbox = true</code> set in <code class=\"notranslate\">nix.conf</code>? (See <a href=\"https://nixos.org/manual/nix/stable/command-ref/conf-file.html\" rel=\"nofollow\">Nix manual</a>)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Tested, as applicable:\n<ul dir=\"auto\">\n<li><a href=\"https://nixos.org/manual/nixos/unstable/index.html#sec-nixos-tests\" rel=\"nofollow\">NixOS test(s)</a> (look inside <a href=\"https://github.com/NixOS/nixpkgs/blob/master/nixos/tests\">nixos/tests</a>)</li>\n<li>and/or <a href=\"https://nixos.org/manual/nixpkgs/unstable/#sec-package-tests\" rel=\"nofollow\">package tests</a></li>\n<li>or, for functions and \"core\" functionality, tests in <a href=\"https://github.com/NixOS/nixpkgs/blob/master/lib/tests\">lib/tests</a> or <a href=\"https://github.com/NixOS/nixpkgs/blob/master/pkgs/test\">pkgs/test</a></li>\n<li>made sure NixOS tests are <a href=\"https://nixos.org/manual/nixpkgs/unstable/#ssec-nixos-tests-linking\" rel=\"nofollow\">linked</a> to the relevant packages</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Tested compilation of all packages that depend on this change using <code class=\"notranslate\">nix-shell -p nixpkgs-review --run \"nixpkgs-review rev HEAD\"</code>. Note: all changes have to be committed, also see <a href=\"https://github.com/Mic92/nixpkgs-review#usage\">nixpkgs-review usage</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Tested basic functionality of all binary files (usually in <code class=\"notranslate\">./result/bin/</code>)</li>\n<li><a href=\"https://github.com/NixOS/nixpkgs/blob/master/CONTRIBUTING.md#generating-2211-release-notes\">22.11 Release Notes (or backporting 22.05 Release notes)</a>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> (Package updates) Added a release notes entry if the change is major or breaking</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> (Module updates) Added a release notes entry if the change is significant</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> (Module addition) Added a release notes entry if adding a new NixOS module</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> (Release notes changes) Ran <code class=\"notranslate\">nixos/doc/manual/md-to-db.sh</code> to update generated release notes</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Fits <a href=\"https://github.com/NixOS/nixpkgs/blob/master/CONTRIBUTING.md\">CONTRIBUTING.md</a>.</li>\n</ul>\n",
            "url": "https://github.com/NixOS/nixpkgs/pull/179471",
            "title": "lib.types, formats: Introduce a new `secret` type and use it for generalized secret replacements in `pkgs.formats`",
            "date_modified": "2023-04-22T02:44:05.000Z",
            "date_published": "2022-06-28T18:42:17.000Z",
            "author": {
                "name": "talyz",
                "url": "https://github.com/talyz"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1148549?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h1 dir=\"auto\">Features</h1>\n<ul dir=\"auto\">\n<li>Flake inputs are now only copied to the Nix store if that's actually needed (fixing <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"503413602\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nix/issues/3121\" data-hovercard-type=\"issue\" data-hovercard-url=\"/NixOS/nix/issues/3121/hovercard\" href=\"https://github.com/NixOS/nix/issues/3121\">#3121</a>). That is, an operation like <code class=\"notranslate\">nix build nixpkgs#hello</code> no longer copies the <code class=\"notranslate\">nixpkgs</code> flake to the Nix store. Only an expression like <code class=\"notranslate\">src = ./.</code> or <code class=\"notranslate\">nix.registry.nixpkgs.flake = nixpkgs;</code> will cause an entire flake to be copied.</li>\n<li><code class=\"notranslate\">fetchTree</code> can now apply patches to a tree, e.g. <code class=\"notranslate\">fetchTree { ...; patches = [ ./foo.patch ./bar.patch ]; }</code> (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"677133792\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nix/issues/3920\" data-hovercard-type=\"issue\" data-hovercard-url=\"/NixOS/nix/issues/3920/hovercard\" href=\"https://github.com/NixOS/nix/issues/3920\">#3920</a>). Patches are applied in memory, so this doesn't require the entire tree to be materialized to disk.</li>\n<li>The <code class=\"notranslate\">github</code> fetcher now fetches zip archives instead of tarballs, and does not unpack them to disk. Depending on the filesystem, this can save a lot of disk space. (E.g. on ext4 with a 4 KiB block size, an unpacked Nixpkgs tree takes 252 MiB, whereas the zip archive takes 43 MiB.</li>\n</ul>\n<h1 dir=\"auto\">Design</h1>\n<p dir=\"auto\">The evaluator no longer accesses the filesystem directly. Instead, it uses a virtual filesystem abstraction called <code class=\"notranslate\">InputAccessor</code>, which has FS operations like <code class=\"notranslate\">readFile()</code> . You can get the <code class=\"notranslate\">InputAccessor</code> for an <code class=\"notranslate\">Input</code> by calling <code class=\"notranslate\">Input::lazyFetch()</code>, which unlike <code class=\"notranslate\">Input::fetch()</code> does not (necessarily) copy the input to the Nix store.</p>\n<p dir=\"auto\">The following <code class=\"notranslate\">InputAccessor</code>s currently exist:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">FSInputAccessor</code>: This directly accesses the host filesystem, optionally rooted at some prefix. This is used for both non-flake evaluation (e.g. <code class=\"notranslate\">nix-build ./foo.nix</code>), for <code class=\"notranslate\">path://</code> flakes, and for (dirty or clean) Git working directories (<code class=\"notranslate\">git+file://</code>). It optionally takes a set of allowed paths, which is used by the Git input type to ensure that you can't access untracked files.</li>\n<li><code class=\"notranslate\">MemoryInputAccessor</code>: An in-memory filesystem, used to provide <code class=\"notranslate\">&lt;nix/fetchurl.nix&gt;</code>.</li>\n<li><code class=\"notranslate\">ZipInputAccessor</code>: An accessor that reads directly from a zipfile, using libzip. Used by the <code class=\"notranslate\">github</code> fetcher.</li>\n<li><code class=\"notranslate\">PatchingInputAccessor</code>: An adaptor that wraps another accessor whose <code class=\"notranslate\">readFile()</code> applies a patch to the file returned by the underlying accessor.</li>\n</ul>\n<p dir=\"auto\">Paths are represented inside the evaluator using the <code class=\"notranslate\">SourcePath</code> type, which is a tuple of an <code class=\"notranslate\">InputAccessor</code> and a path relative to the root of the input. So the <code class=\"notranslate\">SourcePath</code> <code class=\"notranslate\">{input-&gt;lazyFetch(), \"/flake.nix\"}</code> represents the file <code class=\"notranslate\">flake.nix</code> inside some input.</p>\n<h1 dir=\"auto\">Incompatible changes</h1>\n<p dir=\"auto\">The <code class=\"notranslate\">outPath</code> attribute returned by <code class=\"notranslate\">fetchTree</code> et al. is no longer a store path but a path (i.e. a <code class=\"notranslate\">SourcePath</code>). This can cause some breakage, e.g. in NixOS, setting</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"nix.registry.nixpkgs.flake = nixpkgs;\"><pre class=\"notranslate\"><code class=\"notranslate\">nix.registry.nixpkgs.flake = nixpkgs;\n</code></pre></div>\n<p dir=\"auto\">causes the error <code class=\"notranslate\">A definition for option 'nix.registry.nixpkgs.to.path' is not of type 'string or signed integer or boolean or package'</code>. Instead you have to write:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"nix.registry.nixpkgs.flake = &quot;${nixpkgs}&quot;;\"><pre class=\"notranslate\"><code class=\"notranslate\">nix.registry.nixpkgs.flake = \"${nixpkgs}\";\n</code></pre></div>\n<p dir=\"auto\">to force the argument to be a store path.</p>\n<h1 dir=\"auto\">To do</h1>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Fix many test failures.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Fix showing source code in error messages. Currently the error formatter doesn't know anything about <code class=\"notranslate\">SourcePath</code>s.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Give a helpful message when trying to use untracked files in a git repo (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"798609338\" data-permission-text=\"Title is private\" data-url=\"https://github.com/NixOS/nix/issues/4507\" data-hovercard-type=\"issue\" data-hovercard-url=\"/NixOS/nix/issues/4507/hovercard\" href=\"https://github.com/NixOS/nix/issues/4507\">#4507</a>).</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Fix the evaluation cache.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Fix flake locking.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Get rid of the <code class=\"notranslate\">narHash</code> attribute in <code class=\"notranslate\">flake.lock</code>? Computing it is expensive since it requires reading the entire source tree. However, we need it to be able to substitute flake inputs, but maybe we don't care about that.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> What to do with <code class=\"notranslate\">path://</code> inputs? They're only locked by <code class=\"notranslate\">narHash</code>, so if we don't have <code class=\"notranslate\">narHash</code>, we can't lock <code class=\"notranslate\">path://</code> inputs.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Fix/improve subflake handling.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Update release notes / docs.</li>\n</ul>",
            "url": "https://github.com/NixOS/nix/pull/6530",
            "title": "Source tree abstraction",
            "date_modified": "2023-05-22T20:26:40.000Z",
            "date_published": "2022-05-12T19:10:40.000Z",
            "author": {
                "name": "edolstra",
                "url": "https://github.com/edolstra"
            }
        }
    ]
}